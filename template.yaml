AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  query-lambda

  Template for query-lambda

Parameters:
  stageName:
    Type: String
    Default: Prod
  secretName:
    Description: "turso secret name"
    Type: "String"
    Default: "prod/query"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Resources:
  LambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src
      Handler: app.lambda_handler
      Runtime: python3.11
      PackageType: Zip
      Architectures:
        - arm64
      Events:
        ApiEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /upload
            Method: post
      Environment:
        Variables:
          TURSO_DB_URL: !Sub "{{resolve:secretsmanager:${secretName}:SecretString:url}}"
          TURSO_DB_AUTH_TOKEN: !Sub "{{resolve:secretsmanager:${secretName}:SecretString:token}}"

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref stageName
      DefinitionBody:
        openapi: 3.0.1
        swagger: "2.0"
        basePath: "/prod"
        paths:
          /upload:
            post:
              responses:
                default:
                  description: "Default response for POST /query_upload"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
                connectionType: "INTERNET"
      Auth:
        Authorizers:
          OAuth2Authorizer:
            JwtConfiguration:
              issuer: "https://winning-snipe-81.clerk.accounts.dev"
              audience:
                - query
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: OAuth2Authorizer
      CorsConfiguration:
        AllowOrigins:
          - "https://www.querydata.info"
          - "https://querydata.info"
        AllowHeaders:
          - x-apigateway-header
          - authorization
          - content-type
        AllowMethods:
          - POST
          - OPTIONS
        MaxAge: 3600
        AllowCredentials: true
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  HttpApiUrl:
    Description: URL of your API endpoint
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${stageName}/"
  HttpApiId:
    Description: Api id of HttpApi
    Value: !Ref HttpApi
